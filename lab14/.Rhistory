server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x="Ethnicity", y="FilteredCountFR"))+
geom_col(fill="pink", alpha=0.6, color="grey42")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y="FilteredCountFR"))+
geom_col(fill="pink", alpha=0.6, color="grey42")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink", alpha=0.6, color="grey42")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=FilteredCountFR, y=FilteredCountFR))+
geom_col(fill="pink", alpha=0.6, color="grey42")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink", alpha=0.6, color="grey42")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill=Ethnicity, alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="Ethnicity", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink2", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink2", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 5, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink2", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions by Ethinicity Across UC Campuses"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 2, #can control size of boxes
selectInput("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"), selected = "2010"),
selectInput("y", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("z", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="pink2", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
UC_admit %>%
count(Ethnicity)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 2, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("y", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=reorder(Academic_Yr, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Ethnicity",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 2, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("y", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=reorder(Academic_Yr, FilteredCountFR), y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Year",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 2, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("y", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Year",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("z", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Year",
y="Count")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("z", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Year",
y="Count")+
scale_x_discrete(limits=c("2010","2011","2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"))
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Admissions Across UC Campuses 2010-2019"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3, #can control size of boxes
selectInput("x", "Select Campus", choices = c("Berkeley", "Davis", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"), selected = "Berkeley"),
radioButtons("y", "Select Category", choices = c("Admits", "Applicants", "Enrollees"), selected = "Admits"),
selectInput("z", "Select Ethnicity", choices = c("African American", "All", "American Indian", "Asian", "Chicano/Latino", "International", "Unknown", "White"), selected = "African American"),
), # close the first box
box(title = "Plot of UC Admission Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when close it
output$plot <- renderPlot({
UC_admit %>%
mutate(Academic_Yr=as.factor(Academic_Yr)) %>%
filter(Campus==input$x & Category==input$y & Ethnicity==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR))+
geom_col(fill="royalblue", alpha=0.6, color="grey20")+
theme_light()+
labs(x="Year",
y="Count")
})
}
shinyApp(ui, server)
runApp('hw13_pt2.R')
runApp('hw13_pt3.R')
